<snippet>
  <content><![CDATA[
template <typename node, typename update>
struct segTree{
	ll len;
	vector<node> t;
	vector<update> u;
	vector<bool> lazy;
	vector<ll> tl,tr;
	node identity_element;
	update identity_transformation;

	template<typename T>
	segTree(T &a){
		len = a.size();
		t.resize(4 * len);
		u.resize(4 * len);
		lazy.resize(4 * len);
		tl.resize(4 * len);
		tr.resize(4 * len);
		identity_element = node();
		identity_transformation = update();
		build(a,1,0,len-1);
	}

	template <typename T>
	void build(const T &a, const ll &v, const ll &l, const ll &r){
		tl[v]=l;
		tr[v]=r;
		if (l == r){
			t[v]=a[l];
			return;
		}
		ll tm = (l + r) >> 1;
		build(a, v << 1, l, tm);
		build(a, v << 1 | 1, tm + 1, r);
		t[v].merge(t[v << 1], t[v << 1 | 1]);
	}

	void apply(const ll &v, update val){
		if (tl[v] != tr[v]){
			lazy[v] = 1;
			u[v].combine(val, tl[v], tr[v]);
		}
		val.apply(t[v], tl[v], tr[v]);
	}

	void pushdown(const ll &v){
		if(lazy[v]){
			apply(v << 1, u[v]);
			apply(v << 1 | 1, u[v]);
			u[v] = identity_transformation;
			lazy[v] = 0;
		}
	}
 
	// rupd = range update
	void rupd(const ll &v,const ll &l, const ll &r, update val){
		if (l > tr[v] || r < tl[v])
			return;
		if (tl[v] >= l && tr[v] <= r){
			apply(v,val);
			return;
		}
		pushdown(v);
		rupd(v << 1, l, r, val);
		rupd(v << 1 | 1, l, r, val);
		t[v].merge(t[v << 1], t[v << 1 | 1]);
	}

	node query(const ll &v,const ll &l, const ll &r){
		if (l > tr[v] || r < tl[v])
			return identity_element;
		if (tl[v] >= l && tr[v] <= r)
			return t[v];
		pushdown(v);
		node a,b,ans;
		a=query(v*2,l,r);
		b=query(v*2+1,l,r);
		ans.merge(a,b);
		return ans;
	}
	node query(const ll &l, const ll &r){
		return query(1, l, r);
	}
	void rupd(const ll &l, const ll &r, update upd){
		rupd(1, l, r, upd);
	}
};

struct node1{
	ll sum=0;
	// use more variables if you want more information
	// these default values should be identity_element
	
	node1() {}
	node1(ll val){
		sum=val;
	}
	void merge(const node1 &l, const node1 &r){
		sum=l.sum+r.sum;
	}
}; 
struct update1{
	ll v=0;
	// use more variables if you want more information
	// these default values should be identity_transformation
	
	update1() {}
	update1(ll val){
		v=val;
	}
	// combine the current update1 with the other update1
	void combine(update1 &other, const ll &tl, const ll &tr){
		// only needed for range updates
	}
	// store the correct information in the node1 x
	void apply(node1 &x, const ll &tl, const ll &tr){
		x.sum=v;
	}
};
]]></content>
  <tabTrigger>segTree</tabTrigger>
  <description>Segment Tree</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
