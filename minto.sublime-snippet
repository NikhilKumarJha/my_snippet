<snippet>
  <content><![CDATA[
template< ll mod >
struct ModInt {
  ll x;
  ModInt() : x(0) {}
  ModInt(int64_t y) : x(y >= 0 ? y % mod : (mod - (-y) % mod) % mod) {}
  ModInt &operator+=(const ModInt &p) {
	if((x += p.x) >= mod) x -= mod;
	return *this;
  }
  ModInt &operator-=(const ModInt &p) {
	if((x += mod - p.x) >= mod) x -= mod;
	return *this;
  }
  ModInt &operator*=(const ModInt &p) {
	x = (int) (1LL * x * p.x % mod);
	return *this;
  }
  ModInt &operator/=(const ModInt &p) {
	*this *= p.inverse();
	return *this;
  }
  ModInt operator-() const { return ModInt(-x); }
  ModInt operator+(const ModInt &p) const { return ModInt(*this) += p; }
  ModInt operator-(const ModInt &p) const { return ModInt(*this) -= p; }
  ModInt operator*(const ModInt &p) const { return ModInt(*this) *= p; }
  ModInt operator/(const ModInt &p) const { return ModInt(*this) /= p; }
  bool operator<(const ModInt &p) const { return x < p.x; }
  bool operator>(const ModInt &p) const { return x > p.x; }
  bool operator==(const ModInt &p) const { return x == p.x; }
  bool operator!=(const ModInt &p) const { return x != p.x; }
  string to_str() { return to_string(x); }
  ModInt inverse() const {
	ll a = x, b = mod, u = 1, v = 0, t;
	while(b > 0) {
	  t = a / b;
	  swap(a -= t * b, b);
	  swap(u -= t * v, v);
	}
	return ModInt(u);
  }
  ModInt pow(int64_t n) const {
	ModInt ret(1), mul(x);
	while(n > 0) {
	  if(n & 1LL) ret *= mul;
	  mul *= mul;
	  n >>= 1LL;
	}
	return ret;
  }
  friend ostream &operator<<(ostream &os, const ModInt &p) {
	return os << p.x;
  }
  friend istream &operator>>(istream &is, ModInt &a) {
	int64_t t;
	is >> t;
	a = ModInt< mod >(t);
	return (is);
  }
  static ll get_mod() { return mod; }
};
using mint = ModInt< mod >;
]]></content>
  <tabTrigger>minto</tabTrigger>
  <description>Modular Integer</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>