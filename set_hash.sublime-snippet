<snippet>
	<content><![CDATA[
struct set_hash{
    const ll k1=998244353;
    const ll h1=61;
    const ll m1=999999937;
    const ll k2=999999929;
    const ll h2=71;
    const ll m2=1000000007;
    ll n;
    vector<ll> hash1,hash2;
    set_hash(vector<ll> &a){
        this->n=a.size();
        hash1.resize(n);
        hash2.resize(n);
        hash1[0]=fpm(a[0]+k1,h1,m1);
        hash2[0]=fpm(a[0]+k1,h1,m2);
        for(ll i=1;i<n;i++){
            hash1[i]=(hash1[i-1]+fpm(a[i]+k1,h1,m1))%m1;
            hash2[i]=(hash2[i-1]+fpm(a[i]+k1,h1,m2))%m2;
        }
    }
    pair<ll, ll> sub_hash(ll l,ll r){
        ll sum1=hash1[r];
        if(l)   sum1-=hash1[l-1];
        if(sum1<0)
            sum1+=m1;
        sum1%=m1;
        ll sum2=hash2[r];
        if(l)   sum2-=hash2[l-1];
        if(sum2<0)
            sum2+=m2;
        sum2%=m2;
        return {sum1,sum2};
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>set_hash</tabTrigger>
	<description>Set based hashing where order does not matter</description>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
